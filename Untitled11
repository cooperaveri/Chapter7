{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "6dfac80d-1d49-4326-8fe2-e64eb4980920",
   "metadata": {},
   "source": [
    "Chapter 7"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b137c131-8246-4283-98ea-7651a6ddd875",
   "metadata": {},
   "source": [
    "# Algorithm Workbench 1,5"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "783c3cfc-8f15-4685-b60e-7c6e764ca187",
   "metadata": {},
   "source": [
    "## 1. write a statement that creates a list with the following strings: 'einstein', 'newton', 'copernicus', and 'kepler'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "d68d6aac-189b-4940-814c-7bdd1e6a162b",
   "metadata": {},
   "outputs": [],
   "source": [
    "names = ['einstein', 'newton', 'copernicus', 'kepler']\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0d4da496-a082-43d3-9ca3-785305b157c0",
   "metadata": {},
   "source": [
    "## 5. write a function that accepts a list as an argument (assume the list contains integers) and returns the total of the values in the list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "b76e80e5-d289-4219-b6ad-e10ad3131f10",
   "metadata": {},
   "outputs": [],
   "source": [
    "def calculate_total(numbers):\n",
    "    total = 0  # Initialize a variable to store the total sum\n",
    "\n",
    "    for number in numbers:\n",
    "        total + number  # add each number in the list to the total\n",
    "    \n",
    "    return total  # return the final total sum"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "a75a5055-6003-423b-8274-f8f7d5999c7b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "15\n"
     ]
    }
   ],
   "source": [
    "def calculate_total(numbers):\n",
    "    total = 0  # Initialize a variable to store the total sum\n",
    "\n",
    "    for number in numbers:\n",
    "        total += number  # add each number in the list to the total\n",
    "    \n",
    "    return total  # return the final total sum\n",
    "\n",
    "my_list = [1, 2, 3, 4, 5]\n",
    "result = calculate_total(my_list)\n",
    "print(result)  \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "3bdc7c7e-a94d-4c24-a41d-1b571dcfbd45",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "81\n"
     ]
    }
   ],
   "source": [
    "def calculate_total(numbers):\n",
    "    total = 0  # Initialize a variable to store the total sum\n",
    "\n",
    "    for number in numbers:\n",
    "        total += number  # add each number in the list to the total\n",
    "    \n",
    "    return total  # return the final total sum\n",
    "\n",
    "my_list = [11, 21, 3, 41, 5]\n",
    "result = calculate_total(my_list)\n",
    "print(result)  \n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b4e637a2-88d2-4def-8abf-44fe3ee22737",
   "metadata": {},
   "source": [
    "# Programming Exercises 1,2,6,14"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6c58de76-30a3-4232-86b6-ef00c1c149f8",
   "metadata": {},
   "source": [
    "## 1. design a program that asks the user to enter a stores sales for each day of the week. the amounts should be stored in a list. use a loop to calculate the total sales for the week and display the result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "45df5259-8f8b-4482-b418-835ad4a8250c",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "unterminated string literal (detected at line 5) (2856929931.py, line 5)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  Cell \u001b[0;32mIn[26], line 5\u001b[0;36m\u001b[0m\n\u001b[0;31m    days_of_week = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', sunday']\u001b[0m\n\u001b[0m                                                                                              ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m unterminated string literal (detected at line 5)\n"
     ]
    }
   ],
   "source": [
    "# a empty list to store daily sales\n",
    "daily_sales = []\n",
    "\n",
    "# define a list of days of the week\n",
    "days_of_week = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', sunday']\n",
    "\n",
    "# use loop to get sales for each day\n",
    "for day in days_of_week:\n",
    "    # ask user for sales input for the current day\n",
    "    sales = float(input(f'Enter sales for {day}: $'))\n",
    "    \n",
    "    daily_sales.append(sales)\n",
    "\n",
    "# total sales for the week using a loop\n",
    "total_sales = 0\n",
    "for sales in daily_sales:\n",
    "    total_sales += sales\n",
    "\n",
    "# total sales for the week\n",
    "print(f'Total sales for the week: ${total_sales:.2f}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "33e6f571-1ba6-480f-a287-a5030a400b6c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter sales for monday: $ 20\n",
      "Enter sales for tuesday: $ 25\n",
      "Enter sales for wednesday: $ 45\n",
      "Enter sales for thursday: $ 20\n",
      "Enter sales for friday: $ 50\n",
      "Enter sales for saturday: $ 55\n",
      "Enter sales for sunday: $ 80\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total sales for the week: $295.00\n"
     ]
    }
   ],
   "source": [
    "# a empty list to store daily sales\n",
    "daily_sales = []\n",
    "\n",
    "# define a list of days of the week\n",
    "days_of_week = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday']\n",
    "\n",
    "# use loop to get sales for each day\n",
    "for day in days_of_week:\n",
    "    # ask user for sales input for the current day\n",
    "    sales = float(input(f'Enter sales for {day}: $'))\n",
    "    \n",
    "    daily_sales.append(sales)\n",
    "\n",
    "# total sales for the week using a loop\n",
    "total_sales = 0\n",
    "for sales in daily_sales:\n",
    "    total_sales += sales\n",
    "\n",
    "# total sales for the week\n",
    "print(f'Total sales for the week: ${total_sales:.2f}')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31820645-6117-4660-986a-f451c9076b67",
   "metadata": {
    "tags": []
   },
   "source": [
    "## 2. design a program that generates a seven digit lottery number. the program should generate seven numbers, each in the range of 0-9, and assign each number to a list element. then write another loop that displays the contents of the list."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "23d9edc1-86a1-4df9-94bb-c2e9c95e225c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Your seven-digit lottery number is:\n",
      "4997080"
     ]
    }
   ],
   "source": [
    "import random\n",
    "\n",
    "# an empty list to store the lottery numbers\n",
    "lottery_numbers = []\n",
    "\n",
    "# seven random numbers in the range of 0-9 and add them to the list\n",
    "for _ in range(7):\n",
    "    random_number = random.randint(0, 9)\n",
    "    lottery_numbers.append(random_number)\n",
    "\n",
    "# display the generated lottery numbers\n",
    "print('Your seven-digit lottery number is:')\n",
    "for number in lottery_numbers:\n",
    "    print(number, end='')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "c37f83ee-408c-4e73-9ab3-4d9b58cf20dd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Your seven-digit lottery number is:\n",
      "6008613"
     ]
    }
   ],
   "source": [
    "import random\n",
    "\n",
    "# an empty list to store the lottery numbers\n",
    "lottery_numbers = []\n",
    "\n",
    "# seven random numbers in the range of 0-9 and add them to the list\n",
    "for _ in range(7):\n",
    "    random_number = random.randint(0, 9)\n",
    "    lottery_numbers.append(random_number)\n",
    "\n",
    "# display the generated lottery numbers\n",
    "print('Your seven-digit lottery number is:')\n",
    "for number in lottery_numbers:\n",
    "    print(number, end='')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "161183e0-eb9e-4d18-9370-59a7644aa502",
   "metadata": {},
   "source": [
    "## 6. in a program, write a function that accepts two arguments: a list, and a number n. assume that the list contains numbers. the function should display all of the numbers in the list that are greater than the number n."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "6897f070-41fb-4855-956d-0dba2c2a43cf",
   "metadata": {},
   "outputs": [],
   "source": [
    "def numbers_greater_than_n(input_list, n):\n",
    "    # an empty list to store the numbers greater than n\n",
    "    result = []\n",
    "\n",
    "    for number in input_list:\n",
    "        if number > n:\n",
    "            result.append(number)\n",
    "\n",
    "    # display the numbers greater than n\n",
    "    if len(result) == 0:\n",
    "        print('No numbers in the list are greater than', n)\n",
    "    else:\n",
    "        print('Numbers greater than', n, 'are:', result)\n",
    "\n",
    "        # example\n",
    "my_list = [10, 5, 20, 8, 15, 30]\n",
    "value_to_compare = 15\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "3f4715d6-ac8a-42ab-a57e-f456e544aa59",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Numbers greater than 15 are: [20, 30]\n"
     ]
    }
   ],
   "source": [
    "def numbers_greater_than_n(input_list, n):\n",
    "    # an empty list to store the numbers greater than n\n",
    "    result = []\n",
    "\n",
    "    for number in input_list:\n",
    "        if number > n:\n",
    "            result.append(number)\n",
    "\n",
    "    # display the numbers greater than n\n",
    "    if len(result) == 0:\n",
    "        print('No numbers in the list are greater than', n)\n",
    "    else:\n",
    "        print('Numbers greater than', n, 'are:', result)\n",
    "\n",
    "        # example\n",
    "my_list = [10, 5, 20, 8, 15, 30]\n",
    "value_to_compare = 15\n",
    "numbers_greater_than_n(my_list, value_to_compare)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "66063214-c1e7-4ef5-b314-59c1fcd6352a",
   "metadata": {},
   "source": [
    "## 14. create a textfile that contains your expenses for last month in the following categories: rent, gas, food, clothing, car payment, misc. write a python program that reads the data from the file and uses matplotlib to plot a pie chart showing how you spend money"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "81c532d1-c7ff-44c3-a945-a6c0b004c321",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# sample data\n",
    "categories = ['rent', 'gas', 'food', 'clothing', 'car payment', 'misc']\n",
    "expenses = [500, 100, 300, 100, 350, 50]\n",
    "\n",
    "# create a pie chart\n",
    "plt.figure(figsize=(8, 8))\n",
    "plt.pie(expenses, labels=categories,)\n",
    "plt.axis('equal') \n",
    "\n",
    "# show the pie chart\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6c95ed1c-13c8-44e6-a43d-6419a00c38c5",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "anaconda-panel-2023.05-py310",
   "language": "python",
   "name": "conda-env-anaconda-panel-2023.05-py310-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
